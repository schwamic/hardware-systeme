-- Memory content (generated by viscy2l) ...
type t_memory is array (0 to 264) of std_logic_vector (15 downto 0);
signal mem_content: t_memory := (
    16#0000# => "0100100000000000",  -- LDIH  r0, 0x00   ; => 00000000
    16#0001# => "0100000000000000",  -- LDIL  r0, 0x00   ; => 0000000000000000
    16#0002# => "0100100100000000",  -- LDIH  r1, 0x00   ; => 00000000
    16#0003# => "0100000100000000",  -- LDIL  r1, 0x00   ; => 0000000000000000
    16#0004# => "0100101100000000",  -- LDIH  r3, 0x00   ; => 00000000
    16#0005# => "0100001100000000",  -- LDIL  r3, 0x00   ; => 0000000000000000
    16#0006# => "0011000000000000",  -- XOR   r0, r0, r0 ; Nur '0' in r0
    16#0007# => "0100000000001000",  -- LDIL  r0, 8      ; 1. Wert in r0
    16#0008# => "0011000100100100",  -- XOR   r1, r1, r1
    16#0009# => "0100000100000100",  -- LDIL  r1, 4
    16#000a# => "0011001101101100",  -- XOR   r3, r3, r3
    16#000b# => "0000001100000100",  -- ADD   r3, r0, r1 ; Addition: r3 = r0 + r1     => 12
    16#000c# => "0011001101101100",  -- XOR   r3, r3, r3
    16#000d# => "0000101100000100",  -- SUB   r3, r0, r1 ; Subtraktion: r3 = r0 - r1  => 4
    16#000e# => "0011001101101100",  -- XOR   r3, r3, r3
    16#000f# => "0001001100000000",  -- SAL   r3, r0     ; Links-Shift:               => 16
    16#0010# => "0011001101101100",  -- XOR   r3, r3, r3
    16#0011# => "0001101100000000",  -- SAR   r3, r0     ; Rechts-Shift:              => 4
    16#0012# => "0011001101101100",  -- XOR   r3, r3, r3
    16#0013# => "0100101111111111",  -- LDIH  r3, 0xFF   ; => 1111111100000000
    16#0014# => "0100001111111111",  -- LDIL  r3, 0xFF   ; => 1111111111111111
    16#0015# => "0010001100000100",  -- AND   r3, r0, r1 ; => 0
    16#0016# => "0011001101101100",  -- XOR   r3, r3, r3
    16#0017# => "0010101100000100",  -- OR    r3, r0, r1 ; => 12
    16#0018# => "0011001101101100",  -- XOR   r3, r3, r3
    16#0019# => "0011001100000100",  -- XOR   r3, r0, r1 ; => 12
    16#001a# => "0011001101101100",  -- XOR   r3, r3, r3
    16#001b# => "0011101100000000",  -- NOT   r3, r0     ; => 1111111111110111
    16#001c# => "0100000100000000",  -- LDIL r1, 0x00
    16#001d# => "0100100100000001",  -- LDIH r1, 0x01
    16#001e# => "0101001100100000",  -- LD  r3, [r1]	 ; => 0x0100
    16#001f# => "0011001101101100",  -- XOR   r3, r3, r3
    16#0020# => "0100001100000000",  -- LDIL  r3, result & 255
    16#0021# => "0100101100000001",  -- LDIH  r3, result >> 8
    16#0022# => "0011000100100100",  -- XOR   r1, r1, r1
    16#0023# => "0011000100100100",  -- XOR   r1, r1, r1
    16#0024# => "0100100111111111",  -- LDIH  r1, 0xFF
    16#0025# => "0100000111111111",  -- LDIL  r1, 0xFF   ; => 1111111111111111
    16#0026# => "0101100001100100",  -- ST  [r3], r1
    16#0027# => "0011001101101100",  -- XOR   r3, r3, r3
    16#0028# => "0011000100100100",  -- XOR   r1, r1, r1
    16#0029# => "0100000100101101",  -- LDIL r1, loopjmp
    16#002a# => "0100100100000000",  -- LDIH r1, loopjmp>>8
    16#002b# => "1000000000100000",  -- JMP r1
    16#002c# => "0100001111111111",  -- LDIL r3, 0xFF
    16#002d# => "0011001101101100",  -- XOR   r3, r3, r3
    16#002e# => "0011000100100100",  -- XOR   r1, r1, r1
    16#002f# => "0011001001001000",  -- XOR   r2, r2, r2
    16#0030# => "0100001000000001",  -- LDIL r2, 0x01
    16#0031# => "0100101000000000",  -- LDIH r2, 0x00
    16#0032# => "0100000100110110",  -- LDIL r1, loopjnz
    16#0033# => "0100100100000000",  -- LDIH r1, loopjnz>>8
    16#0034# => "1001100000101000",  -- JNZ r2, r1
    16#0035# => "0100001111111111",  -- LDIL r3, 0xFF
    16#0036# => "0011001101101100",  -- XOR   r3, r3, r3
    16#0037# => "0011000100100100",  -- XOR   r1, r1, r1
    16#0038# => "0011001001000100",  -- XOR   r2, r2, r1
    16#0039# => "0100001000000000",  -- LDIL r2, 0x00
    16#003a# => "0100101000000000",  -- LDIH r2, 0x00
    16#003b# => "0100000100111111",  -- LDIL r1, loopjz
    16#003c# => "0100100100000000",  -- LDIH r1, loopjz>>8
    16#003d# => "1001000000101000",  -- JZ r2, r1
    16#003e# => "0100001111111111",  -- LDIL r3, 0xFF
    16#003f# => "0011000100100100",  -- XOR   r1, r1, r1
    16#0040# => "1000100000000000",  -- HALT
    16#0100# => "0000000000000000",  -- result: .res 8
    16#0101# => "0000000000000000",
    16#0102# => "0000000000000000",
    16#0103# => "0000000000000000",
    16#0104# => "0000000000000000",
    16#0105# => "0000000000000000",
    16#0106# => "0000000000000000",
    16#0107# => "0000000000000000",
    16#0108# => "0000000000101010",  -- 	.data 42
    others => "UUUUUUUUUUUUUUUU"
);
